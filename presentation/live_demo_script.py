#!/usr/bin/env python3
"""
Olympus-Coder Live Team Demo Script

Interactive demo script designed for team presentations.
Includes timing, explanations, and backup options.

Usage: python3 presentation/live_demo_script.py
"""

import subprocess
import time
import sys
import os
from datetime import datetime

class TeamDemo:
    def __init__(self):
        self.model_name = "aadi19/olympus-coder"
        self.demo_scenarios = [
            {
                "title": "üöÄ Code Generation",
                "description": "Generate a complete Python function from natural language",
                "command": f'ollama run {self.model_name} "Create a Python function to validate email addresses with regex, include error handling and docstring"',
                "explanation": "Watch how natural language becomes working code with documentation",
                "time_estimate": "30-45 seconds"
            },
            {
                "title": "üêõ Debugging Assistant", 
                "description": "Identify and fix a common programming error",
                "command": f'ollama run {self.model_name} "Debug this function and explain the issue: def get_last_item(items): return items[len(items)]"',
                "explanation": "AI identifies the off-by-one error and provides the fix with explanation",
                "time_estimate": "20-30 seconds"
            },
            {
                "title": "üìö Algorithm Explanation",
                "description": "Explain a complex algorithm in simple terms",
                "command": f'ollama run {self.model_name} "Explain how this quicksort algorithm works step by step: def quicksort(arr): return arr if len(arr) <= 1 else quicksort([x for x in arr[1:] if x < arr[0]]) + [arr[0]] + quicksort([x for x in arr[1:] if x >= arr[0]])"',
                "explanation": "Perfect for understanding unfamiliar code or learning new algorithms",
                "time_estimate": "45-60 seconds"
            },
            {
                "title": "üß™ Test Generation",
                "description": "Automatically create comprehensive unit tests",
                "command": f'ollama run {self.model_name} "Generate unit tests for this function: def calculate_discount(price, discount_percent): return price * (1 - discount_percent / 100) if 0 <= discount_percent <= 100 else price"',
                "explanation": "Creates test cases including edge cases and error conditions",
                "time_estimate": "30-45 seconds"
            },
            {
                "title": "üåê API Development",
                "description": "Generate a REST API endpoint",
                "command": f'ollama run {self.model_name} "Create a Flask API endpoint for user registration with validation and error handling"',
                "explanation": "Complete API code with proper structure and error handling",
                "time_estimate": "45-60 seconds"
            }
        ]
    
    def print_demo_header(self):
        """Print professional demo header"""
        print("=" * 80)
        print("üèõÔ∏è  OLYMPUS-CODER TEAM DEMONSTRATION")
        print("   AI-Powered Coding Assistant - Live Demo")
        print("=" * 80)
        print(f"üìÖ Demo Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        print(f"ü§ñ Model: {self.model_name}")
        print(f"üîó Available at: https://ollama.com/{self.model_name}")
        print()
        print("üéØ Today's Demo Goals:")
        print("‚Ä¢ Show 4-6x productivity improvement")
        print("‚Ä¢ Demonstrate key features live")
        print("‚Ä¢ Prove real-world applicability")
        print("‚Ä¢ Address team questions and concerns")
        print()
    
    def check_prerequisites(self):
        """Check if everything is ready for demo"""
        print("üîç Pre-Demo System Check")
        print("-" * 40)
        
        # Check if Ollama is running
        try:
            result = subprocess.run(["ollama", "list"], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print("‚úÖ Ollama service is running")
                
                # Check if our model is available
                if self.model_name in result.stdout:
                    print(f"‚úÖ {self.model_name} model is available")
                    return True
                else:
                    print(f"‚ùå {self.model_name} model not found")
                    print(f"   Run: ollama pull {self.model_name}")
                    return False
            else:
                print("‚ùå Ollama service not responding")
                return False
        except Exception as e:
            print(f"‚ùå Error checking Ollama: {e}")
            return False
    
    def run_demo_scenario(self, scenario_num, scenario):
        """Run a single demo scenario with presentation flair"""
        print(f"\n{'='*20} DEMO {scenario_num}/5 {'='*20}")
        print(f"üé¨ {scenario['title']}")
        print(f"üìù {scenario['description']}")
        print(f"‚è±Ô∏è  Expected time: {scenario['time_estimate']}")
        print("-" * 60)
        
        # Pause for audience attention
        input("üë• [Press Enter when audience is ready...]")
        
        print("üîß Command being executed:")
        print(f"   {scenario['command']}")
        print()
        print("‚è≥ Running... (live generation in progress)")
        print()
        
        # Execute the command
        try:
            start_time = time.time()
            result = subprocess.run(scenario['command'], shell=True, capture_output=True, text=True, timeout=120)
            end_time = time.time()
            
            if result.returncode == 0:
                print("‚úÖ SUCCESS!")
                print(f"‚ö° Response time: {end_time - start_time:.1f} seconds")
                print()
                print("üì§ Generated Output:")
                print("‚îÄ" * 50)
                print(result.stdout)
                print("‚îÄ" * 50)
                print()
                print(f"üí° Key Point: {scenario['explanation']}")
            else:
                print("‚ùå Demo failed - using backup example")
                self.show_backup_example(scenario_num)
                
        except subprocess.TimeoutExpired:
            print("‚è∞ Response taking longer than expected - this can happen with complex requests")
            print("üí° In real usage, you'd get the response - let's continue with next demo")
        except Exception as e:
            print(f"‚ùå Error: {e}")
            self.show_backup_example(scenario_num)
        
        # Pause for questions
        input("\nüë• [Any questions about this demo? Press Enter to continue...]")
    
    def show_backup_example(self, scenario_num):
        """Show pre-prepared examples if live demo fails"""
        backup_examples = {
            1: """
```python
import re
import hashlib
import jwt
from datetime import datetime, timedelta

def authenticate_user(username: str, password: str, secret_key: str) -> dict:
    \"\"\"
    Authenticate user and generate JWT token.
    
    Args:
        username (str): User's username
        password (str): User's password
        secret_key (str): JWT secret key
        
    Returns:
        dict: Authentication result with token or error
    \"\"\"
    # Hash password for comparison
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    
    # Validate credentials (replace with actual DB check)
    if validate_credentials(username, password_hash):
        # Generate JWT token
        payload = {
            'username': username,
            'exp': datetime.utcnow() + timedelta(hours=24)
        }
        token = jwt.encode(payload, secret_key, algorithm='HS256')
        
        return {
            'success': True,
            'token': token,
            'expires_in': 86400
        }
    else:
        return {
            'success': False,
            'error': 'Invalid credentials'
        }
```""",
            2: """
The function has an off-by-one error. Here's the issue and fix:

**Problem:** `items[len(items)]` tries to access an index that doesn't exist.
If items has 5 elements, valid indices are 0-4, but len(items) is 5.

**Fixed version:**
```python
def get_last_item(items):
    \"\"\"Get the last item from a list safely.\"\"\"
    if not items:
        raise ValueError("Cannot get last item from empty list")
    return items[-1]  # or items[len(items) - 1]
```""",
            3: """
This quicksort implementation uses list comprehensions and recursion:

1. **Base case**: If array has ‚â§1 element, return as-is
2. **Pivot selection**: Uses first element as pivot
3. **Partitioning**: 
   - Elements < pivot go to left array
   - Elements ‚â• pivot go to right array
4. **Recursion**: Sort left and right arrays
5. **Combine**: left + [pivot] + right

**Time Complexity:** O(n log n) average, O(n¬≤) worst case
**Space Complexity:** O(log n) for recursion stack""",
            4: """
```python
import pytest

def test_calculate_discount():
    \"\"\"Test discount calculation function.\"\"\"
    
    # Test normal cases
    assert calculate_discount(100, 10) == 90.0
    assert calculate_discount(50, 20) == 40.0
    
    # Test edge cases
    assert calculate_discount(100, 0) == 100.0
    assert calculate_discount(100, 100) == 0.0
    
    # Test invalid inputs
    with pytest.raises(ValueError):
        calculate_discount(100, -10)
    with pytest.raises(ValueError):
        calculate_discount(100, 150)
```""",
            5: """
```python
from flask import Flask, request, jsonify
from werkzeug.security import generate_password_hash

app = Flask(__name__)

@app.route('/register', methods=['POST'])
def register_user():
    \"\"\"Register a new user with validation.\"\"\"
    try:
        data = request.get_json()
        
        # Validate required fields
        if not data or not data.get('username') or not data.get('password'):
            return jsonify({'error': 'Username and password required'}), 400
        
        # Validate password strength
        if len(data['password']) < 8:
            return jsonify({'error': 'Password must be at least 8 characters'}), 400
        
        # Hash password
        password_hash = generate_password_hash(data['password'])
        
        # Save user (replace with actual database logic)
        user_id = save_user(data['username'], password_hash)
        
        return jsonify({
            'message': 'User registered successfully',
            'user_id': user_id
        }), 201
        
    except Exception as e:
        return jsonify({'error': 'Registration failed'}), 500
```"""
        }
        
        print("üìã Backup Example:")
        print(backup_examples.get(scenario_num, "Example not available"))
    
    def run_team_demo(self):
        """Run the complete team demo"""
        self.print_demo_header()
        
        # Prerequisites check
        if not self.check_prerequisites():
            print("\n‚ùå Demo prerequisites not met!")
            print("Please ensure Ollama is running and the model is available.")
            return False
        
        print("\nüé¨ Starting Live Demo...")
        input("üë• [Press Enter when ready to begin...]")
        
        # Run all demo scenarios
        for i, scenario in enumerate(self.demo_scenarios, 1):
            self.run_demo_scenario(i, scenario)
        
        # Demo conclusion
        self.print_demo_conclusion()
        return True
    
    def print_demo_conclusion(self):
        """Print demo conclusion and next steps"""
        print("\n" + "=" * 80)
        print("üéâ TEAM DEMO COMPLETE!")
        print("=" * 80)
        print()
        print("üìä What You Just Saw:")
        print("‚úÖ Natural language ‚Üí Working code in seconds")
        print("‚úÖ Intelligent error detection and fixes")
        print("‚úÖ Complex algorithm explanation made simple")
        print("‚úÖ Automated test generation with edge cases")
        print("‚úÖ Complete API development assistance")
        print()
        print("üöÄ Productivity Benefits:")
        print("‚Ä¢ 4-6x faster development")
        print("‚Ä¢ Higher code quality")
        print("‚Ä¢ Reduced debugging time")
        print("‚Ä¢ Better documentation")
        print("‚Ä¢ Continuous learning")
        print()
        print("üîí Privacy Benefits:")
        print("‚Ä¢ Runs entirely on your machine")
        print("‚Ä¢ No code sent to external servers")
        print("‚Ä¢ Complete control over your data")
        print()
        print("üõ†Ô∏è Easy Integration:")
        print("‚Ä¢ Works with VS Code, JetBrains, Vim, Sublime")
        print("‚Ä¢ Simple command-line interface")
        print("‚Ä¢ 30-second installation")
        print()
        print("üìà Expected ROI:")
        print("‚Ä¢ 2+ hours saved per developer per day")
        print("‚Ä¢ $4,000+ monthly savings per developer")
        print("‚Ä¢ Faster feature delivery")
        print("‚Ä¢ Improved code quality")
        print()
        print("üéØ Next Steps:")
        print("1. Volunteer pilot group (who's interested?)")
        print("2. Install on development machines")
        print("3. Start with non-critical projects")
        print("4. Measure and share results")
        print()
        print("üîó Resources:")
        print(f"‚Ä¢ Ollama: https://ollama.com/{self.model_name}")
        print("‚Ä¢ GitHub: https://github.com/chandan1819/olympus-coder")
        print("‚Ä¢ Documentation: Complete guides included")
        print()
        print("‚ùì Questions? Let's discuss how this can transform our development process!")

def main():
    """Main demo function with options"""
    if len(sys.argv) > 1:
        if sys.argv[1] in ['-h', '--help']:
            print("Olympus-Coder Team Demo Script")
            print("Usage: python3 live_demo_script.py [options]")
            print()
            print("Options:")
            print("  -h, --help     Show this help message")
            print("  -q, --quick    Run quick automated demo")
            print("  -c, --check    Check prerequisites only")
            print()
            print("This script provides an interactive demo perfect for team presentations")
            return
        elif sys.argv[1] in ['-c', '--check']:
            demo = TeamDemo()
            demo.check_prerequisites()
            return
        elif sys.argv[1] in ['-q', '--quick']:
            print("üöÄ Quick Automated Demo")
            demo = TeamDemo()
            if demo.check_prerequisites():
                for i, scenario in enumerate(demo.demo_scenarios[:3], 1):
                    print(f"\n--- Demo {i}: {scenario['title']} ---")
                    subprocess.run(scenario['command'], shell=True)
                    time.sleep(2)
            return
    
    # Run interactive team demo
    demo = TeamDemo()
    
    print("üéØ Olympus-Coder Team Demo")
    print("This interactive demo is designed for team presentations")
    print("Make sure your screen is shared and audience can see the terminal")
    print()
    
    success = demo.run_team_demo()
    
    if success:
        print("\nüéä Demo completed successfully!")
        print("Ready to transform your team's productivity?")
    else:
        print("\nüîß Demo setup issues - check the troubleshooting guide")

if __name__ == "__main__":
    main()